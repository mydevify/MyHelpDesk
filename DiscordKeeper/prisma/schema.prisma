// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id        String       @id
  email     String       @unique
  avatar    String?
  cover     String?
  name      String?
  userid String?
  roleId    Int          @default(1) 
  role      Role         @relation(fields: [roleId], references: [id])
  tickets   TicketUser[]
  comments  Comment[]    @relation("UserComments")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
}


model Ticket {
  id        Int          @id @default(autoincrement())
  title     String?
  content   String?
  status    String?      // e.g., "open", "closed", "pending"
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  token     String?      @unique
  users     TicketUser[]
  comments  Comment[]
}

model TicketUser {
  id       Int    @id @default(autoincrement())
  userId   String?
  ticketId Int?
  user     User?   @relation(fields: [userId], references: [id])
  ticket   Ticket? @relation(fields: [ticketId], references: [id])

  @@unique([userId, ticketId])
}

model Vouch {
  id            Int      @id @default(autoincrement())
  message       String?
  vouchedBy     String?
  vouchedTo     String?
  createdAt     DateTime? @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime? @default(now())
  ticketId  Int?
  userId    String?
  ticket    Ticket?   @relation(fields: [ticketId], references: [id])
  user      User?     @relation("UserComments", fields: [userId], references: [id])
}
