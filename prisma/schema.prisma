// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id
  email      String       @unique
  avatar     String?
  cover      String?
  name       String?
  userid     String?
  roleId     Int          @default(1)
  role       Role         @relation(fields: [roleId], references: [id])
  tickets    TicketUser[]
  comments   Comment[]    @relation("UserComments")
  banned     Ban[]        @relation("BannedUser")
  issuedBans Ban[]        @relation("BanningStaff")

  StaffTicketNote StaffTicketNote[]
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}

model Ticket {
  id        Int          @id @default(autoincrement())
  title     String?
  content   String?
  status    String? // e.g., "open", "closed", "pending"
  createdAt DateTime?    @default(now())
  updatedAt DateTime?    @updatedAt
  token     String?      @unique
  users     TicketUser[]
  comments  Comment[]

  StaffTicketNote StaffTicketNote[]
}

model TicketUser {
  id       Int     @id @default(autoincrement())
  userId   String?
  ticketId Int?
  user     User?   @relation(fields: [userId], references: [id])
  ticket   Ticket? @relation(fields: [ticketId], references: [id])

  @@unique([userId, ticketId])
}

model Vouch {
  id        Int       @id @default(autoincrement())
  message   String?
  vouchedBy String?
  vouchedTo String?
  createdAt DateTime? @default(now())
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String?
  createdAt DateTime? @default(now())
  ticketId  Int?
  userId    String?
  ticket    Ticket?   @relation(fields: [ticketId], references: [id])
  user      User?     @relation("UserComments", fields: [userId], references: [id])
}

model Ban {
  id        Int      @id @default(autoincrement())
  userId    String
  staffId   String
  reason    String?
  createdAt DateTime @default(now())
  user      User     @relation("BannedUser", fields: [userId], references: [id])
  staff     User     @relation("BanningStaff", fields: [staffId], references: [id])

  @@unique([userId, staffId])
}

model StaffTicketNote {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   String
  ticketId  Int
  staff     User     @relation(fields: [staffId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@index([staffId])
  @@index([ticketId])
}

model Settings {
  id           Int    @id @default(autoincrement())
  sitename     String
  announcement String
  offer        String
  logo         String
  theme        String
  discordLogs  Boolean
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  services Service[]
}



model Service {
  id              Int      @id @default(autoincrement())
  image           String
  title           String
  description     String
  price           Float
  categoryId      Int
  amount          Int
  buyOrSellType   String
  category        Category @relation(fields: [categoryId], references: [id])
}

model country {
  id        Int    @id @default(autoincrement())
  name      String
  shortname  String @unique
  enabled   Boolean @default(false)
}



